-- ASDL is a small DSL for describing AST data structures.  See this paper for
-- more information: http://www.cs.princeton.edu/research/techreps/TR-554-97.
--
-- Each AST node (representing statements and expressions) is defined by the
-- ASDL.  The definition is independent of its realization in any particular
-- programming language.
--
-- Definitions in ASDL take the following form:
--
--     type = sum_of_constructors
--
-- Constructors are defined with typed fields, which may be optionally named:
--
--     Constructor(a_type)
--     Constructor(a_type a_name)
--
-- Fluent uses the following convention: constructors with named fields
-- correspond to actual AST nodes; constructors without named fields are
-- similar to Rust's 'tuple structs' and allow to define union types. This is
-- due to ASDL not supporting union types out of the box.
--
-- ASDL recognizes three native types: bool, int, str.

module Fluent
{
    res = Resource(entry* body, comment? comment, span? span)

    entry = Message(iden id, pat? value, attr* attributes, tag* tags, comment? comment)
          | Section(symb name, comment? comment)
          | Comment(comment)
          | Junk(str content)
          attributes (annot* annotations, span? span)

    annot = Annotation(str code, str* args, str message, span? span)
    span = Span(int start, int end)

    -- Pattern values
    pat = Pattern(elem* elements, span? span)
    elem = TextElement(string value, span? span)
         | Placeable(expr expression, span? span)

    -- Expressions
    expr = InlineExpression(inline_expr)
         | BlockExpression(block_expr)
    inline_expr = StringExpression(string)
                | NumberExpression(number)
                | MessageReference(iden id)
                | ExternalArgument(iden id)
                | AttributeExpression(iden id, iden name)
                | VariantExpression(iden id, varkey key)
                | CallExpression(fun callee, arg* arguments)
                | Placeable(expr expression)
                attributes (span? span)
    block_expr = SelectExpression(inline_expr? expression, var* variants)
               attributes (span? span)

    -- Attributes of Message
    attr = Attribute(iden id, pat value, span? span)

    -- Tags of Message
    tag = Tag(symb name, span? span)

    -- Variants of SelectExpression
    var = Variant(varkey key, pat value, bool default, span? span)
    varkey = NumberExpression(number)
           | Symbol(symb)

    -- Arguments to CallExpression
    arg = Expression(inline_expr)
        | NamedArgument(iden name, argval value, span? span)
    argval = NumberExpression(number)
           | StringExpression(string)
    
    iden = Identifier(str name, span? span)
    symb = Symbol(str name, span? span)
    fun = Function(str name, span? span)
    string = StringExpression(str value, span? span)
    number = NumberExpression(str value, span? span)

    comment = Comment(str content, span? span)
}
