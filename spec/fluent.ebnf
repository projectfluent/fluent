
/* An FTL file defines a Resource consisting of Entries. */
Resource            ::= (Entry | blank_block | junk_line)*

/* Entries are the main building blocks of Fluent. They define translations and
 * contextual and semantic information about the translations. During the AST
 * construction, adjacent comment lines of the same comment type (defined by
 * the number of #) are joined together. Single-# comments directly preceding
 * Messages and Terms are attached to the Message or Term and are not
 * standalone Entries. */
Entry               ::= (Message line_end)
                      | (Term line_end)
                      | CommentLine
Message             ::= Identifier blank_inline? "=" blank_inline? ((Pattern Attribute*) | (Attribute+))
Term                ::= TermIdentifier blank_inline? "=" blank_inline? Value Attribute*

/* Adjacent comment lines of the same comment type are joined together during
 * the AST construction. */
CommentLine         ::= ("###" | "##" | "#") ("\u0020" /.*/)? line_end

/* Adjacent junk_lines are joined into FTL.Junk during the AST construction. */
junk_line           ::= /.*/ line_end

/* Attributes of Messages and Terms. */
Attribute           ::= line_end blank? "." Identifier blank_inline? "=" blank_inline? Pattern

/* Value types: Pattern and VariantList. */
Value               ::= Pattern
                      | VariantList
Pattern             ::= PatternElement+
VariantList         ::= blank? "{" variant_list blank? "}"
PatternElement      ::= TextElement
                      | Placeable
                      | (blank_block blank_inline? Placeable)
TextElement         ::= (text_char | text_cont)+
Placeable           ::= "{" blank? (SelectExpression | InlineExpression) blank? "}"

/* Rules for validating expressions in Placeables and as selectors of
 * SelectExpressions are documented in spec/valid.md and enforced in
 * syntax/abstract.mjs. */
InlineExpression    ::= StringLiteral
                      | NumberLiteral
                      | VariableReference
                      | CallExpression
                      | AttributeExpression
                      | VariantExpression
                      | MessageReference
                      | TermReference
                      | Placeable

/* Literals */
StringLiteral       ::= quote quoted_text_char* quote
NumberLiteral       ::= "-"? digit+ ("." digit+)?

/* Inline Expressions */
MessageReference    ::= Identifier
TermReference       ::= TermIdentifier
VariableReference   ::= VariableIdentifier
CallExpression      ::= Function blank? "(" blank? argument_list blank? ")"
argument_list       ::= (Argument blank? "," blank?)* Argument?
Argument            ::= NamedArgument
                      | InlineExpression
NamedArgument       ::= Identifier blank? ":" blank? (StringLiteral | NumberLiteral)
AttributeExpression ::= (MessageReference | TermReference) "." Identifier
VariantExpression   ::= TermReference VariantKey

/* Block Expressions */
SelectExpression    ::= InlineExpression blank? "->" blank_inline? variant_list
variant_list        ::= Variant* DefaultVariant Variant* line_end
Variant             ::= line_end blank? VariantKey blank_inline? Value
DefaultVariant      ::= line_end blank? "*" VariantKey blank_inline? Value
VariantKey          ::= "[" blank? (NumberLiteral | VariantName) blank? "]"
VariantName         ::= word (blank word)*

/* Identifiers */
Identifier          ::= identifier
TermIdentifier      ::= "-" identifier
VariableIdentifier  ::= "$" identifier
Function            ::= [A-Z] [A-Z_?-]*

/* Tokens */
identifier          ::= [a-zA-Z] [a-zA-Z0-9_-]*
word                ::= (regular_char - backslash - "}" - "{" - "]" - "[" - "=")+

/* Characters */
backslash           ::= "\\"
quote               ::= "\""
/* Any Unicode character from BMP excluding C0 control characters, space,
 * surrogate blocks and non-characters (U+FFFE, U+FFFF).
 * Cf. https://www.w3.org/TR/REC-xml/#NT-Char
 * TODO Add characters from other planes: U+10000 to U+10FFFF.
 */
regular_char        ::= [!-\uD7FF\uE000-\uFFFD]
text_char           ::= blank_inline
                      | "\u0009"
                      | /\\u[0-9a-fA-F]{4}/
                      | (backslash backslash)
                      | (backslash "{")
                      | (regular_char - "{" - backslash)
text_cont           ::= blank_block blank_inline (text_char - "}" - "[" - "*" - ".")
quoted_text_char    ::= (text_char - quote)
                      | (backslash quote)
digit               ::= [0-9]

/* Whitespace */
blank_inline        ::= "\u0020"+
line_end            ::= "\u000D\u000A"
                      | "\u000A"
                      | EOF
blank_block         ::= (blank_inline? line_end)+
blank               ::= (blank_inline | line_end)+
