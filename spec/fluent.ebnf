
/* An FTL file defines a Resource. */
Resource                   ::= (blank_line | Entry | junk_line)*
Entry                      ::= Message
                             | Term
                             | (ResourceComment | GroupComment | Comment)
Message                    ::= Comment? Identifier inline_space? "=" inline_space? ((Pattern Attribute*) | (Attribute+)) line_end
Term                       ::= Comment? TermIdentifier inline_space? "=" inline_space? Value Attribute* line_end
Comment                    ::= ("#" comment_line)+
GroupComment               ::= ("##" comment_line)+
ResourceComment            ::= ("###" comment_line)+

/* Adjacent junk_lines should be joined into FTL.Junk during the AST
   construction. */
junk_line                  ::= /.*/ line_end

/* Attributes of Messages and Terms. */
Attribute                  ::= break_indent "." Identifier inline_space? "=" inline_space? Pattern

/* Value types: Pattern and VariantList. */
Value                      ::= Pattern
                             | VariantList
Pattern                    ::= PatternElement+
VariantList                ::= space_indent? "{" variant_list "}"
PatternElement             ::= TextElement
                             | Placeable
                             | (break_indent Placeable)
TextElement                ::= (text_char | text_cont)+
Placeable                  ::= "{" inline_space? (SelectExpression | InlineExpression) inline_space? "}"

/* Rules for validating expressions in Placeables and as selectors of
 * SelectExpressions are documented in spec/valid.md and enforced in
 * syntax/abstract.mjs. */
InlineExpression           ::= StringLiteral
                             | NumberLiteral
                             | VariableReference
                             | CallExpression
                             | AttributeExpression
                             | VariantExpression
                             | MessageReference
                             | TermReference
                             | Placeable

/* Literals */
StringLiteral              ::= quote quoted_text_char* quote
NumberLiteral              ::= "-"? digit+ ("." digit+)?

/* Inline Expressions */
MessageReference           ::= Identifier
TermReference              ::= TermIdentifier
VariableReference          ::= VariableIdentifier
CallExpression             ::= Function "(" space_indent? argument_list space_indent? ")"
argument_list              ::= (Argument space_indent? "," space_indent?)* Argument?
Argument                   ::= NamedArgument
                             | InlineExpression
NamedArgument              ::= Identifier space_indent? ":" space_indent? (StringLiteral | NumberLiteral)
AttributeExpression        ::= (MessageReference | TermReference) "." Identifier
VariantExpression          ::= TermReference VariantKey

/* Block Expressions */
SelectExpression           ::= InlineExpression inline_space? "->" variant_list
variant_list               ::= inline_space? Variant* DefaultVariant Variant* break_indent
Variant                    ::= break_indent VariantKey inline_space? Value
DefaultVariant             ::= break_indent "*" VariantKey inline_space? Value
VariantKey                 ::= "[" inline_space? (NumberLiteral | VariantName) inline_space? "]"
VariantName                ::= word (inline_space word)*

/* Identifiers */
Identifier                 ::= identifier
TermIdentifier             ::= "-" identifier
VariableIdentifier         ::= "$" identifier
Function                   ::= [A-Z] [A-Z_?-]*

/* Tokens */
identifier                 ::= [a-zA-Z] [a-zA-Z0-9_-]*
comment_line               ::= (line_end)
                             | ("\u0020" /.*/ line_end)
word                       ::= (regular_char - backslash - "}" - "{" - "]" - "[")+

/* Characters */
backslash                  ::= "\\"
quote                      ::= "\""
/* Any Unicode character from BMP excluding C0 control characters, space,
 * surrogate blocks and non-characters (U+FFFE, U+FFFF).
 * Cf. https://www.w3.org/TR/REC-xml/#NT-Char
 * TODO Add characters from other planes: U+10000 to U+10FFFF.
 */
regular_char               ::= [!-\uD7FF\uE000-\uFFFD]
text_char                  ::= inline_space
                             | /\\u[0-9a-fA-F]{4}/
                             | (backslash backslash)
                             | (backslash "{")
                             | (regular_char - "{" - backslash)
text_cont                  ::= break_indent (text_char - "}" - "[" - "*" - ".")
quoted_text_char           ::= (text_char - quote)
                             | (backslash quote)
digit                      ::= [0-9]

/* Whitespace */
inline_space               ::= ("\u0020" | "\u0009")+
line_end                   ::= "\u000D\u000A"
                             | "\u000A"
                             | "\u000D"
                             | EOF
blank_line                 ::= inline_space? line_end
break_indent               ::= line_end blank_line* inline_space
space_indent               ::= inline_space? break_indent?
