body                 ::= blank-line* (entry line-break blank-line*)* entry? EOF
entry                ::= message
                       | term
                       | comment

comment              ::= ('#' (inline-space (char - line-break)*)? line-break)+
                       | ('##' (inline-space (char - line-break)*)? line-break)+
                       | ('###' (inline-space (char - line-break)*)? line-break)+

char                 ::= [https://www.w3.org/TR/REC-xml/#NT-Char]
hexdigit             ::= [0-9a-fA-F]

/* line feed, carriage return; space, tab */
line-break           ::= [#xA#xD]+
inline-space         ::= [#x20#x9]+
blank-line           ::= inline-space* line-break

/* if you break lines you need to indent afterwards */
break-indent         ::= line-break blank-line* inline-space+

/* aliases for convenience */
_                    ::= inline-space
__                   ::= break-indent

identifier           ::= [a-zA-Z] [a-zA-Z0-9_-]*
term-identifier      ::= '-' identifier
external-identifier  ::= '$' identifier

/* exclude whitespace and [ \ ] { } */
word                 ::= (((char - line-break) - inline-space) - [#x5b#x5c#x5d#x7b#x7d])+
builtin              ::= [A-Z] [A-Z_?-]*
number               ::= '-'? [0-9]+ ('.' [0-9]+)?

variant-key          ::= number | word (_ word)*
variant              ::= __ '[' _? variant-key _? ']' pattern
default-variant      ::= __ '*[' _? variant-key _? ']' pattern
variant-list         ::= variant* default-variant variant* line-break

message              ::= identifier _? '=' (pattern attribute* | attribute+)
term                 ::= term-identifier _? '=' pattern attribute*
attribute            ::= __ '.' identifier _? '=' pattern
pattern              ::= (text | placeable)+

/* \ and { must be escaped */
text-char            ::= (char - line-break) - [#x5c#x7b]
                       | '\u' hexdigit hexdigit hexdigit hexdigit
                       | '\' [#x5c#x7b]
/* text can only include newlines if they're followed by an indent */
text                 ::= (text-char | break-indent)* text-char
/* in quoted-text " must be escaped */
quoted-text          ::= '"' (text-char - '"' | '\"')* '"'

placeable            ::= '{' __? (inline-expression | block-expression) __? '}'
inline-expression    ::= quoted-text
                       | number
                       | external-identifier
                       | identifier
                       | message-attribute-expression
                       | term-identifier
                       | term-variant-expression
                       | call-expression
                       | placeable
block-expression     ::= select-expression
                       | variant-list

select-expression    ::= selector-expression _ '->' __ variant-list
selector-expression  ::= quoted-text
                       | number
                       | external-identifier
                       | term-attribute-expression
                       | call-expression

message-attribute-expression  ::= identifier '.' identifier
term-attribute-expression     ::= term-identifier '.' identifier
term-variant-expression       ::= term-identifier '[' _? variant-key _? ']'

call-expression      ::= builtin '(' __? argument-list? __? ')'
argument-list        ::= argument ( __? ',' __? argument)* __? ','?
argument             ::= inline-expression
                       | named-argument
named-argument       ::= identifier __? ':' __? (quoted-text | number)
