body                 ::= (_* NL)* (entry NL)* entry? EOF
entry                ::= comment
                       | section
                       | message

comment              ::= ('//' (char - NL)* )+
section              ::= '[[' _? word (_ word)* _? ']]'

char                 ::= [https://www.w3.org/TR/REC-xml/#NT-Char]
hexdigit             ::= [0-9a-fA-F]

/* line feed, carriage return; space, tab */
line-break           ::= [#xA#xD]+
inline-space         ::= [#x20#x9]+

/* if you break lines you need to indent afterwards */
break-indent         ::= (line-break* inline-space)+

_                    ::= inline-space
NL                   ::= line-break
__                   ::= break-indent

identifier           ::= [a-zA-Z_?-] [a-zA-Z0-9_?-]*
external             ::= '$' identifier

/* exclude whitespace and [ \ ] { } */
word                 ::= (((char - line-break) - inline-space) - [#x5b#x5c#x5d#x7b#x7d])+
builtin              ::= [A-Z_?-]+
number               ::= '-'? [0-9]+ ('.' [0-9]+)?

variant-key          ::= number | variant-symbol
variant-symbol       ::= word (_ word)*
variant              ::= NL __ '[' _? variant-key _? ']' __ pattern
default-variant      ::= NL __ '*[' _? variant-key _? ']' __ pattern
variant-list         ::= variant* default-variant variant*

tag                  ::= '#' word
tag-list             ::= NL (__ tag)+

attribute            ::= NL __ '.' identifier value
attribute-list       ::= attribute+

message              ::= identifier ((value tag-list?) | (value? attribute-list))
value                ::= _? '=' __? pattern
pattern              ::= (text | placeable)+
/* text can only include newlines if they're followed by an indent */
/* \ and { must be escaped */
text-char            ::= (char - line-break) - [#x5c#x7b]
                       | break-indent
                       | '\u' hexdigit hexdigit hexdigit hexdigit
                       | '\' [#x5c#x7b]
text                 ::= text-char+
/* in quoted-text " must be escaped */
quoted-text          ::= '"' (text-char - '"' | '\"')+ '"'


placeable            ::= '{' __? (expression | select-expression | variant-list) __? '}'
expression           ::= quoted-text
                       | number
                       | identifier
                       | external
                       | attribute-expression
                       | variant-expression
                       | call-expression
                       | placeable

select-expression    ::= expression __ '->' __ variant-list
attribute-expression ::= identifier '.' identifier
variant-expression   ::= identifier '[' _? variant-key _? ']'
call-expression      ::= builtin '(' __? (argument ( __? ',' __? argument)*)? __? ')'
argument             ::= expression
                       | named-argument
named-argument       ::= identifier __? ':' __? (quoted-text | number)
